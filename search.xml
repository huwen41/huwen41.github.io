<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/11/19/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2021/11/22/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="通过递归方法实现以先序创建树"><a href="#通过递归方法实现以先序创建树" class="headerlink" title="通过递归方法实现以先序创建树"></a>通过递归方法实现以先序创建树</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BiTree <span class="title">CreatBiTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BiTree T;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c);</span><br><span class="line">	<span class="keyword">if</span> (c == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">		T = <span class="literal">NULL</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		T = (BiTree)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BiTNode));</span><br><span class="line">		T-&gt;data = c;</span><br><span class="line">		T-&gt;lchild = <span class="built_in">CreatBiTree</span>();</span><br><span class="line">		T-&gt;rchild = <span class="built_in">CreatBiTree</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/22/%E4%BA%8C%E5%8F%89%E6%A0%91/xian.png" class title="This is an example image">

<h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123; <span class="comment">//递归</span></span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		<span class="built_in">visit</span>(T-&gt;data);</span><br><span class="line">		<span class="built_in">PreOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">PreOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		<span class="built_in">IreOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">visit</span>(T-&gt;data);</span><br><span class="line">		<span class="built_in">IreOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/11/22/%E4%BA%8C%E5%8F%89%E6%A0%91/huo.png" class title="This is an example image">

<h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LastreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		<span class="built_in">LastreOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">LastreOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">		<span class="built_in">visit</span>(T-&gt;data);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	queue&lt;BiTree&gt;q;</span><br><span class="line">	<span class="keyword">if</span> (T)</span><br><span class="line">		q.<span class="built_in">push</span>(T);</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; q.<span class="built_in">front</span>()-&gt;data &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (q.<span class="built_in">front</span>()-&gt;lchild)</span><br><span class="line">			q.<span class="built_in">push</span>(q.<span class="built_in">front</span>()-&gt;lchild);</span><br><span class="line">		<span class="keyword">if</span> (q.<span class="built_in">front</span>()-&gt;rchild)</span><br><span class="line">			q.<span class="built_in">push</span>(q.<span class="built_in">front</span>()-&gt;rchild);</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		m = <span class="built_in">depth</span>(T-&gt;lchild);</span><br><span class="line">		n = <span class="built_in">depth</span>(T-&gt;rchild);</span><br><span class="line">		<span class="keyword">if</span> (m &gt; n)</span><br><span class="line">			<span class="keyword">return</span> (m + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in"><span class="keyword">return</span></span> (n + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="完整代码如下："><a href="#完整代码如下：" class="headerlink" title="完整代码如下："></a>完整代码如下：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function">BiTree <span class="title">CreatBiTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BiTree T;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c);</span><br><span class="line">	<span class="keyword">if</span> (c == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">		T = <span class="literal">NULL</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		T = (BiTree)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BiTNode));</span><br><span class="line">		T-&gt;data = c;</span><br><span class="line">		T-&gt;lchild = <span class="built_in">CreatBiTree</span>();</span><br><span class="line">		T-&gt;rchild = <span class="built_in">CreatBiTree</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">char</span> data)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123; <span class="comment">//递归</span></span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		<span class="built_in">visit</span>(T-&gt;data);</span><br><span class="line">		<span class="built_in">PreOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">PreOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		<span class="built_in">IreOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">visit</span>(T-&gt;data);</span><br><span class="line">		<span class="built_in">IreOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LastreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		<span class="built_in">LastreOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">LastreOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">		<span class="built_in">visit</span>(T-&gt;data);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fPreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	BiTree p;</span><br><span class="line">	BiTree Stack[<span class="number">20</span>];</span><br><span class="line">	p = T;</span><br><span class="line">	<span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span> (p || top != <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p) &#123;</span><br><span class="line">			Stack[++top] = p;</span><br><span class="line">			cout &lt;&lt; p-&gt;data &lt;&lt; endl;</span><br><span class="line">			p = p-&gt;lchild;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			p = Stack[top--];</span><br><span class="line">			p = p-&gt;rchild;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fIreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	BiTree p;</span><br><span class="line">	BiTree Stack[<span class="number">20</span>];</span><br><span class="line">	p = T;</span><br><span class="line">	<span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span> (p || top != <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p) &#123;</span><br><span class="line">			Stack[++top] = p;</span><br><span class="line">			p = p-&gt;lchild;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			p = Stack[top--];</span><br><span class="line">			cout &lt;&lt; p-&gt;data &lt;&lt; endl;</span><br><span class="line">			p = p-&gt;rchild;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fLastreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	BiTree p;</span><br><span class="line">	BiTree Stack[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> lStack[<span class="number">20</span>];</span><br><span class="line">	p = T;</span><br><span class="line">	<span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span> (p || top != <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p) &#123;</span><br><span class="line">			Stack[++top] = p;</span><br><span class="line">			lStack[top] = <span class="number">1</span>;</span><br><span class="line">			p = p-&gt;lchild;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (lStack[top] == <span class="number">1</span>) &#123;</span><br><span class="line">				p = Stack[top];</span><br><span class="line">				lStack[top] = <span class="number">2</span>;</span><br><span class="line">				p = p-&gt;rchild;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				p = Stack[top--];</span><br><span class="line">				cout &lt;&lt; p-&gt;data &lt;&lt; endl;</span><br><span class="line">				p = <span class="literal">NULL</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换左右子数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rPreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		<span class="built_in">visit</span>(T-&gt;data);</span><br><span class="line">		<span class="built_in">rPreOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">		<span class="built_in">rPreOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rIreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		<span class="built_in">rIreOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">		<span class="built_in">visit</span>(T-&gt;data);</span><br><span class="line">		<span class="built_in">rIreOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rLastreOrderTraverse</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		<span class="built_in">rLastreOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">		<span class="built_in">rLastreOrderTraverse</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">visit</span>(T-&gt;data);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		m = <span class="built_in">depth</span>(T-&gt;lchild);</span><br><span class="line">		n = <span class="built_in">depth</span>(T-&gt;rchild);</span><br><span class="line">		<span class="keyword">if</span> (m &gt; n)</span><br><span class="line">			<span class="keyword">return</span> (m + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in"><span class="keyword">return</span></span> (n + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="keyword">char</span>&gt;p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitcount</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">bitcount</span>(T-&gt;lchild) + <span class="built_in">bitcount</span>(T-&gt;rchild) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层次遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">	queue&lt;BiTree&gt;q;</span><br><span class="line">	<span class="keyword">if</span> (T)</span><br><span class="line">		q.<span class="built_in">push</span>(T);</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; q.<span class="built_in">front</span>()-&gt;data &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (q.<span class="built_in">front</span>()-&gt;lchild)</span><br><span class="line">			q.<span class="built_in">push</span>(q.<span class="built_in">front</span>()-&gt;lchild);</span><br><span class="line">		<span class="keyword">if</span> (q.<span class="built_in">front</span>()-&gt;rchild)</span><br><span class="line">			q.<span class="built_in">push</span>(q.<span class="built_in">front</span>()-&gt;rchild);</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FCA##DB###EH##GM###</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BiTree T;</span><br><span class="line">	T = <span class="built_in">CreatBiTree</span>();</span><br><span class="line">	<span class="built_in">PreOrderTraverse</span>(T);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">IreOrderTraverse</span>(T);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">LastreOrderTraverse</span>(T);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;深度\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> s = <span class="built_in">depth</span>(T);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, s);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;交换左右子树\n&quot;</span>);</span><br><span class="line">	<span class="built_in">rPreOrderTraverse</span>(T);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">rIreOrderTraverse</span>(T);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">rLastreOrderTraverse</span>(T);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;非递归\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fPreOrderTraverse</span>(T);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fIreOrderTraverse</span>(T);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">fLastreOrderTraverse</span>(T);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;层次遍历\n&quot;</span>);</span><br><span class="line">	<span class="built_in">load</span>(T);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度加减</title>
    <url>/2021/11/21/%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因为int变量类型最大只能存2<sup>32</sup>-1个数,所以用数组来代替存储，把一个大数一位一位存入数组中，并进行相应的运算。</p>
<h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.1415</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">300100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> a[N];</span><br><span class="line"><span class="keyword">char</span> b[N];</span><br><span class="line">ll c[N];</span><br><span class="line">ll d[N];</span><br><span class="line">ll e[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,a,b);<span class="comment">//以字符串形式输入数据</span></span><br><span class="line">	ll few=<span class="number">0</span>;</span><br><span class="line">	ll len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">	ll len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;len1;i++)<span class="comment">//转化为整形</span></span><br><span class="line">	&#123;</span><br><span class="line">		c[i]=a[len1<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;len2;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		d[i]=b[len2<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll len=<span class="built_in">max</span>(len1,len2)+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;len;i++)<span class="comment">//解决进位问题</span></span><br><span class="line">	&#123;</span><br><span class="line">		e[i]=c[i]+d[i]+few;</span><br><span class="line">		few=e[i]/<span class="number">10</span>;</span><br><span class="line">		e[i]%=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(e[i]==<span class="number">0</span>&amp;&amp;len&gt;<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			len--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(ll i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,e[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="练习的题目"><a href="#练习的题目" class="headerlink" title="练习的题目:"></a>练习的题目:</h3><p>&lt;<a href="https://acm.hdu.edu.cn/showproblem.php?pid=1000">Problem - 1000 (hdu.edu.cn)</a>&gt;</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>图的bfs与dfs</title>
    <url>/2021/11/26/%E5%9B%BE%E7%9A%84bfs%E4%B8%8Edfs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MVNum 100					   <span class="comment">//最大顶点数 </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//边结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> adjvex;                       <span class="comment">//顶点的下标</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">nextarc</span>;</span>          <span class="comment">//指向下一条边的指针</span></span><br><span class="line">&#125; ArcNode, *Arc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顶点信息</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">	ArcNode *firsttarc;              <span class="comment">//指向第一条依附该顶点的边的指针</span></span><br><span class="line">&#125; VNode, AdjList[MVNum];            <span class="comment">//AdjList表示邻接表类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//邻接表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ALGraph</span> &#123;</span></span><br><span class="line">	AdjList vertices;</span><br><span class="line">	<span class="keyword">int</span> vexnum, arcnum;             <span class="comment">//总顶点数和总边数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顶点v在G.verti00ces中的序号i</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(ALGraph G, <span class="keyword">char</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (v == G.vertices[i].data)</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建有向图 G(邻接表)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDG</span><span class="params">(ALGraph &amp;G)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入总顶点数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;G.vexnum);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入总边数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;G.arcnum);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; G.vexnum; m++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入第%d个顶点：&quot;</span>, m + <span class="number">1</span>);</span><br><span class="line">		cin &gt;&gt; G.vertices[m].data;</span><br><span class="line">		G.vertices[m].firsttarc = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; G.arcnum; k++) &#123;</span><br><span class="line">		<span class="keyword">char</span> v1, v2;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n请输入第%d条边的起点：&quot;</span>, k + <span class="number">1</span>);</span><br><span class="line">		cin &gt;&gt; v1;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入第%d条边的终点：&quot;</span>, k + <span class="number">1</span>);</span><br><span class="line">		cin &gt;&gt; v2;</span><br><span class="line">		<span class="keyword">int</span> i, j;</span><br><span class="line">		i = <span class="built_in">LocateVex</span>(G, v1);</span><br><span class="line">		j = <span class="built_in">LocateVex</span>(G, v2);</span><br><span class="line">		Arc p1 = <span class="keyword">new</span> ArcNode;                  <span class="comment">//生成一个新的边结点p1</span></span><br><span class="line">		p1-&gt;adjvex = j;                        <span class="comment">//邻接点序号为j</span></span><br><span class="line">		p1-&gt;nextarc = G.vertices[i].firsttarc;</span><br><span class="line">		G.vertices[i].firsttarc = p1;          <span class="comment">//将新结点*p1插入顶点v1的边表头部</span></span><br><span class="line"><span class="comment">//		Arc p2=new ArcNode;                    //生成一个新的边结点p2</span></span><br><span class="line"><span class="comment">//		p2-&gt;adjvex=i;                          //邻接点序号为i</span></span><br><span class="line"><span class="comment">//		p2-&gt;nextarc=G.vertices[j].firsttarc;</span></span><br><span class="line"><span class="comment">//		G.vertices[j].firsttarc=p2;            //将新结点*p2插入顶点v2的边表头部</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问标志</span></span><br><span class="line"><span class="keyword">bool</span> visited[MVNum] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先遍历 (邻接表)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_AL</span><span class="params">(ALGraph G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, G.vertices[v].data);</span><br><span class="line">	visited[v] = <span class="number">1</span>;                     <span class="comment">//访问第v个标志，并将访问标志设置为1</span></span><br><span class="line">	Arc p = <span class="keyword">new</span> ArcNode;</span><br><span class="line">	p = G.vertices[v].firsttarc;        <span class="comment">//p指向v的边链表的第一个边结点</span></span><br><span class="line">	<span class="keyword">while</span> (p != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> w = p-&gt;adjvex;             <span class="comment">//w是v的邻接点</span></span><br><span class="line">		<span class="keyword">if</span> (!visited[w])</span><br><span class="line">			<span class="built_in">DFS_AL</span>(G, w);              <span class="comment">//如果w为访问，递归调用</span></span><br><span class="line">		p = p-&gt;nextarc;                <span class="comment">//p指向下一个边结点</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXQSIZE 100</span></span><br><span class="line"><span class="comment">//循环队列的存储</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> *base;</span><br><span class="line">	<span class="keyword">int</span> front;      <span class="comment">//头指针</span></span><br><span class="line">	<span class="keyword">int</span> rear;       <span class="comment">//尾指针</span></span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">	Q.base = <span class="keyword">new</span> <span class="keyword">int</span>[MAXQSIZE];</span><br><span class="line">	<span class="keyword">if</span> (!Q.base)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	Q.front = Q.rear = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判空(空为1)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue Q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MAXQSIZE == Q.front)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	Q.base[Q.rear] = e;</span><br><span class="line">	Q.rear = (Q.rear + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	e = Q.base[Q.front];</span><br><span class="line">	Q.front = (Q.front + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取队头元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHead</span><span class="params">(SqQueue Q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front != Q.rear)</span><br><span class="line">		<span class="keyword">return</span> Q.base[Q.front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问标志</span></span><br><span class="line"><span class="keyword">bool</span> visited1[MVNum] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回u的第一个邻接点下标</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FirstAdjVex</span><span class="params">(ALGraph G, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	ArcNode *p = G.vertices[u].firsttarc;</span><br><span class="line">	<span class="keyword">if</span> (p)</span><br><span class="line">		<span class="keyword">return</span> p-&gt;adjvex;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回顶点u的相对于w的下一个邻接点序号</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NextAdjVex</span><span class="params">(ALGraph G, <span class="keyword">int</span> u, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	ArcNode *p = G.vertices[u].firsttarc;</span><br><span class="line">	<span class="keyword">while</span> (p) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;adjvex == w)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		p = p-&gt;nextarc;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (p-&gt;adjvex != w || !p-&gt;nextarc)       <span class="comment">//如果没找到w或者w是最后一个邻接点</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> p-&gt;nextarc-&gt;adjvex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//广度优先遍历 (邻接表)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS_AL</span><span class="params">(ALGraph G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, G.vertices[v].data);</span><br><span class="line">	visited1[v] = <span class="number">1</span>;</span><br><span class="line">	SqQueue Q;</span><br><span class="line">	<span class="built_in">InitQueue</span>(Q);</span><br><span class="line">	<span class="built_in">EnQueue</span>(Q, v);</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">QueueEmpty</span>(Q)) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = <span class="built_in">GetHead</span>(Q);</span><br><span class="line">		<span class="built_in">DeQueue</span>(Q, u);</span><br><span class="line">		<span class="keyword">int</span> w;</span><br><span class="line">		<span class="keyword">for</span> (w = <span class="built_in">FirstAdjVex</span>(G, u); w &gt;= <span class="number">0</span>; w = <span class="built_in">NextAdjVex</span>(G, u, w)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!visited1[w]) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, G.vertices[w].data);</span><br><span class="line">				visited1[w] = <span class="number">1</span>;</span><br><span class="line">				<span class="built_in">EnQueue</span>(Q, w);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//链栈的存储</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; StackNode, *linkStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitLinkStack</span><span class="params">(linkStack &amp;S)</span> </span>&#123;</span><br><span class="line">	S = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判空(空为1)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(linkStack &amp;S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(linkStack &amp;S, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">	linkStack p = <span class="keyword">new</span> StackNode[<span class="number">1</span>];</span><br><span class="line">	p-&gt;data = e;</span><br><span class="line">	p-&gt;next = S;</span><br><span class="line">	S = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(linkStack &amp;S, <span class="keyword">int</span> &amp;e)</span> </span>&#123;</span><br><span class="line">	linkStack p;</span><br><span class="line">	e = S-&gt;data;</span><br><span class="line">	p = S;</span><br><span class="line">	S = S-&gt;next;</span><br><span class="line">	<span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop</span><span class="params">(linkStack &amp;S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;data ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求每个结点的入度并存入数组indegree 中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindinDegree</span><span class="params">(ALGraph G, <span class="keyword">int</span> indegree[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">		indegree[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G.vexnum; j++) &#123;</span><br><span class="line">		ArcNode *p = G.vertices[j].firsttarc;</span><br><span class="line">		<span class="keyword">while</span> (p) &#123;</span><br><span class="line">			indegree[p-&gt;adjvex]++;</span><br><span class="line">			p = p-&gt;nextarc;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ALGraph G;</span><br><span class="line">	<span class="built_in">CreateUDG</span>(G);</span><br><span class="line">	<span class="keyword">char</span> s;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入遍历的起点：&quot;</span>);</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">		<span class="keyword">if</span> (s == G.vertices[i].data)</span><br><span class="line">			t = i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n深度优先遍历：&quot;</span>);</span><br><span class="line">	<span class="built_in">DFS_AL</span>(G, t);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n广度优先遍历：&quot;</span>);</span><br><span class="line">	<span class="built_in">BFS_AL</span>(G, t);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
        <tag>bfs</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
</search>
